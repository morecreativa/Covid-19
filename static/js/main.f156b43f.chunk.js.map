{"version":3,"sources":["InfoBox.js","util.js","Map.js","Table.js","LineGraph.js","App.js","serviceWorker.js","index.js"],"names":["InfoBox","title","cases","total","isRed","active","props","Card","onClick","className","CardContent","Typography","color","casesTypeColors","hex","multiplier","recovered","deaths","sortData","data","sort","a","b","prettyPrintStat","stat","numeral","format","Map","countries","casesType","center","zoom","TileLayer","url","attribution","map","country","Circle","countryInfo","lat","long","fillOpacity","fillColor","radius","Math","sqrt","Popup","style","backgroundImage","flag","showDataOnMap","Table","options","legend","display","elements","point","maintainAspectRatio","tooltips","mode","intersect","callbacks","label","tooltipItem","value","scales","xAxes","type","time","tooltipFormat","yAxes","gridLines","ticks","callback","index","values","buildChartData","lastDataPoint","chartData","date","newDataPoint","x","y","push","LineGraph","useState","setData","useEffect","fetch","then","response","json","console","log","fetchData","length","datasets","backgroundColor","borderColor","App","setCountries","setCountry","setCountryInfo","tableData","setTableData","lng","mapCenter","setMapCenter","mapZoom","setMapZoom","mapCountries","setMapCountries","setCasesType","name","iso2","sortedData","getCountriesData","onCountryChange","event","countryCode","target","FormControl","Select","variant","onChange","MenuItem","e","todayCases","todayRecovered","todayDeaths","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.f156b43f.chunk.js","sourcesContent":["import React from 'react'\r\nimport { Card, CardContent, Typography } from '@material-ui/core'\r\n\r\nfunction InfoBox({title, cases,total,isRed, active, ...props}) {\r\n    return (\r\n        <Card onClick={props.onClick} className={`infoBox ${active && 'infoBox--selected'} ${isRed && 'infoBox--red'}  `}>\r\n            <CardContent>\r\n                {/* Title i.e. Coronaviruses cases */}\r\n                <Typography className=\"infoBox__title\" color=\"textSecondary\">{title}</Typography>\r\n\r\n                {/* Number of cases */}\r\n\r\n                {/* Start Here!!!!!!!!!!!!!!!!!!!!!!!!!!!!! */}\r\n                <h2 className={`infoBox__cases ${!isRed && \"infoBox__cases--green\"}`}>{cases}</h2>\r\n\r\n                {/* Total */}\r\n                <Typography className=\"infoBox__total\" color=\"textSecondary\">\r\n                    {total} total\r\n                </Typography>\r\n            </CardContent>\r\n        </Card>\r\n    )\r\n}\r\n\r\nexport default InfoBox\r\n","import { Circle, Popup } from \"react-leaflet\";\r\nimport numeral from \"numeral\";\r\nimport React from \"react\";\r\n\r\nconst casesTypeColors ={\r\n    cases:{\r\n        hex:\"#CC1034\",\r\n        multiplier:800,\r\n    },\r\n    recovered: {\r\n        hex:\"#7dd71d\",\r\n        multiplier:1200,    // size of the Circle\r\n    },\r\n\r\n    deaths:{\r\n        hex:\"#fb4443\",\r\n        multiplier:2000,\r\n    }\r\n}\r\n\r\nexport const sortData = (data) => {\r\n    const sortedData = [...data];\r\n\r\n    return sortedData.sort((a, b) => a.cases > b.cases ? -1 : 1);\r\n};\r\n\r\nexport const prettyPrintStat=(stat) =>\r\n    stat ?  `+${numeral(stat).format(\"0.0a\")}` : \"+0\";\r\n\r\n//DRAW circles on the map with interactive tooltip\r\n//showDataOnMap is utility function\r\nexport const showDataOnMap = (data, casesType = 'cases') => (\r\n    data.map(country => (\r\n        <Circle\r\n            center={[country.countryInfo.lat, country.countryInfo.long]}\r\n            fillOpacity={0.4}\r\n            color={casesTypeColors[casesType].hex}\r\n            fillColor={casesTypeColors[casesType].hex}\r\n            radius={\r\n                Math.sqrt(country[casesType]) * casesTypeColors[casesType].multiplier\r\n            }\r\n        >\r\n            <Popup>\r\n                <div className=\"info-container\">\r\n                    <div \r\n                    className=\"info-flag\"\r\n                    style={{backgroundImage:`url(${country.countryInfo.flag})`}}\r\n                    />\r\n                    <div className=\"info-name\">{country.country}</div>\r\n                    <div className=\"info-confirmed\">Cases : {numeral(country.cases).format(\"0,0\")}</div>\r\n                    <div className=\"info-recovered\">Recovered: {numeral(country.recovered).format(\"0,0\")}</div>\r\n                    <div className=\"info-deaths\">deaths:{numeral(country.deaths).format(\"0,0\")}</div>\r\n                </div>\r\n            </Popup>\r\n        </Circle>\r\n    ))\r\n);","import React from 'react'\r\nimport {Map as LeafletMap, TileLayer} from \"react-leaflet\";\r\nimport \"./Map.css\";\r\nimport { showDataOnMap } from './util';\r\nimport './InfoBox.css';\r\n\r\nfunction Map({countries, casesType, center,zoom}) {\r\n    return (\r\n        <div className=\"Map\">\r\n            <LeafletMap center={center} zoom={zoom}>\r\n                <TileLayer\r\n                url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n                attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n                />\r\n                {/* Loop through countries and draw circles on the screen */}\r\n                {showDataOnMap(countries, casesType)}\r\n            </LeafletMap>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Map\r\n","import React from 'react';\r\nimport numeral from \"numeral\";\r\nimport './Table.css';\r\nfunction Table({ countries }) {\r\n    return (\r\n        <div className=\"table\">\r\n            {countries.map(({ country, cases }) => (\r\n                <tr>\r\n                    {/* Emnet */}\r\n                    <td>{country}</td>\r\n                    <td><strong>{numeral(cases).format(\"0,0\")}</strong></td>\r\n                </tr>\r\n            ))}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Table\r\n","import React, { useState, useEffect } from 'react'\r\nimport { Line } from \"react-chartjs-2\";\r\nimport numeral from \"numeral\";\r\n\r\nconst options = {\r\n    // Legends for Line\r\n    legend: {\r\n        display: false,\r\n    },\r\n    elements: {\r\n        point: {\r\n            radius: 0,\r\n        },\r\n    },\r\n    maintainAspectRatio: false,\r\n    tooltips: {\r\n        mode: \"index\",\r\n        intersect: false,\r\n        callbacks: {\r\n            label: function (tooltipItem, data) {\r\n                return numeral(tooltipItem.value).format(\"+0,0\");\r\n            },\r\n        },\r\n    },\r\n    scales: {\r\n        xAxes: [\r\n            {\r\n                type: \"time\",\r\n                time: {\r\n                    format: \"MM/DD/YY\",\r\n                    tooltipFormat: \"ll\",\r\n                },\r\n            },\r\n        ],\r\n        yAxes: [\r\n            {\r\n                gridLines: {\r\n                    display: false,\r\n                },\r\n                ticks: {\r\n                    callback: function (value, index, values) {\r\n                        return numeral(value).format(\"0a\");\r\n                    },\r\n                },\r\n            },\r\n        ],\r\n    },\r\n};\r\n\r\nconst buildChartData = (data, casesType) => {\r\n    let chartData = [];\r\n    let lastDataPoint;\r\n\r\n    for (let date in data.cases) {\r\n        if (lastDataPoint) {\r\n            const newDataPoint = {\r\n                x: date,\r\n                y: data[casesType][date] - lastDataPoint\r\n            };\r\n            chartData.push(newDataPoint);\r\n        }\r\n        lastDataPoint = data[casesType][date];\r\n    }\r\n    return chartData;\r\n};\r\n\r\nfunction LineGraph({casesType, ...props}) {\r\n    const [data, setData] = useState({});\r\n\r\n    //https://disease.sh/v3/covid-19/historical/all?lastdays=30\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            await fetch(\"https://disease.sh/v3/covid-19/historical/all?lastdays=120\")\r\n                .then((response) => response.json())\r\n                .then((data) => {\r\n                    console.log(data);\r\n                    let chartData = buildChartData(data, casesType);\r\n                    console.log(chartData);\r\n                    setData(chartData);\r\n                });\r\n        };\r\n        fetchData();\r\n    }, [casesType]);\r\n    return (\r\n        <div className={props.className}>\r\n            {data?.length > 0 && (\r\n                <Line\r\n                    options={options}\r\n                    data={{\r\n                        datasets: [\r\n                            {\r\n                                backgroundColor: \"rgba(204,16,52, 0.5)\",\r\n                                borderColor: \"#CC1034\",\r\n                                data: data,\r\n                            },\r\n                        ],\r\n                    }}\r\n                />\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default LineGraph\r\n","import React, { useState, useEffect } from 'react';\nimport { MenuItem, FormControl, Select, Card, CardContent, } from \"@material-ui/core\";\nimport './App.css';\nimport InfoBox from './InfoBox';\nimport Map from './Map';\nimport Table from './Table';\nimport { sortData, prettyPrintStat } from \"./util\";\nimport LineGraph from './LineGraph';\nimport numeral from \"numeral\";\nimport \"leaflet/dist/leaflet.css\";\n\nfunction App() {\n  // What are we used?, What we use to modify?\n  const [countries, setCountries] = useState([]);\n  const [country, setCountry] = useState('worldwide');\n  const [countryInfo, setCountryInfo] = useState({});\n  const [tableData, setTableData] = useState([]);\n  const [mapCenter, setMapCenter] = useState({ lat: 34.80746, lng: -40.4796 });\n  const [mapZoom, setMapZoom] = useState(3);\n  const [mapCountries, setMapCountries] = useState([]);\n  const [casesType, setCasesType]= useState(\"cases\");\n\n  // USEEFFECT = Run a piece of code\n  // based on a given condition\n  useEffect(() => {\n    fetch(\"https://disease.sh/v3/covid-19/all\")\n      .then((response) => response.json())\n      .then((data) => {\n        setCountryInfo(data);\n      });\n  }, []);\n\n  useEffect(() => {\n    // The code inside here will run once\n    // when the component loads and not again\n\n    // async -> send a request, wait for it, do something with info\n    const getCountriesData = async () => {\n      await fetch(\"https://disease.sh/v3/covid-19/countries\")\n        .then((response) => response.json())\n        .then((data) => {\n          const countries = data.map((country) => ({\n            name: country.country, // United States, United Kingdom \n            value: country.countryInfo.iso2 // UK, USA, FR\n          }));\n\n          const sortedData = sortData(data);\n          setTableData(sortedData);\n          setMapCountries(data);\n          setCountries(countries);\n        });\n    };\n\n    getCountriesData();\n  }, []);\n\n  const onCountryChange = async (event) => {\n    const countryCode = event.target.value;\n    setCountry(countryCode);\n\n    const url = countryCode === 'worldwide'\n      ? \"https://disease.sh/v3/covid-19/all\"\n      : `https://disease.sh/v3/covid-19/countries/${countryCode}`;\n\n    await fetch(url)\n      .then(response => response.json())\n      .then((data) => {\n        setCountry(countryCode);\n\n        // All of the data\n        // From the country response\n        setCountryInfo(data);\n        setMapCenter([data.countryInfo.lat, data.countryInfo.long]);\n        setMapZoom(6);\n      });\n  };\n  // console.log('COUNTRY INFO >>>', countryInfo);\n\n  return (\n    <div className=\"App\">\n      <div className=\"App__left\">\n        <div className=\"App__header\">\n          <h1>Covid 19 Tracker</h1>\n          <FormControl className=\"App__dropdown\">\n            <Select variant=\"outlined\" onChange={onCountryChange} value={country}>\n              {/* Loop through all the countries and  show a drop down list of the options*/}\n              <MenuItem value=\"worldwide\">WORLDWIDE</MenuItem>\n              {countries.map(country => (\n                <MenuItem value={country.value}>{country.name}</MenuItem>\n              ))}\n\n              {/* \n            \n            <MenuItem value=\"worldwide\">Option One</MenuItem>\n            <MenuItem value=\"worldwide\">Worldwide</MenuItem>\n            <MenuItem value=\"worldwide\">WOOOOO</MenuItem>\n             */}\n            </Select>\n          </FormControl>\n        </div>\n\n        <div className=\"App__stats\">\n          <InfoBox\n          isRed\n          active={casesType===\"cases\"}\n          onClick={e=> setCasesType('cases')}\n            title=\"Coronavirus Cases\"\n            cases={prettyPrintStat(countryInfo.todayCases)}\n            total={numeral(countryInfo.cases).format(\"0,0\")} />\n          {/* numeral(countryInfo.cases).format(\"0,0\") */}\n          <InfoBox\n          active={casesType===\"recovered\"}\n          onClick={e=> setCasesType('recovered')}\n            title=\"Recovered\"\n            cases={prettyPrintStat(countryInfo.todayRecovered)}\n            total={numeral(countryInfo.recovered).format(\"0,0\")}\n          />\n          <InfoBox\n          isRed\n          active={casesType===\"deaths\"}\n          onClick={e=> setCasesType('deaths')}\n            title=\"Deaths\"\n            cases={prettyPrintStat(countryInfo.todayDeaths)}\n            total={numeral(countryInfo.deaths).format(\"0,0\")}\n          />\n        </div>\n\n        <Map casesType={casesType} center={mapCenter} zoom={mapZoom} countries={mapCountries}/>\n      </div>\n\n      <Card className=\"App__right\">\n        <CardContent>\n          <h3>Live Cases by Country</h3>\n          <Table countries={tableData} />\n          <h3 className=\"App__graphTitle\">Worldwide new {casesType}</h3>\n          <LineGraph className=\"App__graph\" casesType={casesType}/>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}